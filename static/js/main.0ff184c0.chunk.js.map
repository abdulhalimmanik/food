{"version":3,"sources":["components/Search.js","components/FoodItem.js","components/Food.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","input","onChangeSearch","e","setState","target","value","className","type","this","onChange","placeholder","onClick","props","onClickSearch","React","Component","FoodItem","ingredients","axios","get","recipe","recipe_id","then","response","data","hasOwnProperty","error","console","log","src","image_url","alt","title","map","ingredient","key","Food","recipes","length","App","search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAsBeA,E,2MAlBXC,MAAQ,CAAEC,MAAO,I,EAEjBC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAAEH,MAAOE,EAAEE,OAAOC,S,wEAG1B,IAAD,OACL,OACI,yBAAKC,UAAU,8BACX,2BAAOC,KAAK,OAAOF,MAAOG,KAAKT,MAAMC,MAAOS,SAAUD,KAAKP,eAAiBS,YAAY,mBACxF,4BAAQJ,UAAU,YAAYK,QAAS,kBAAM,EAAKC,MAAMC,cAAc,EAAKd,MAAMC,SAAjF,e,GAbKc,IAAMC,WC2CZC,E,2MAxCXjB,MAAQ,CAAEkB,YAAa,I,mFAEF,IAAD,OAEhBC,IAAMC,IAAN,qFAAwFX,KAAKI,MAAMQ,OAAOC,YAAaC,MAAK,SAAAC,GACpHA,EAASC,KAAKJ,OAAOK,eAAe,gBACpC,EAAKtB,SAAS,CAAEc,YAAaM,EAASC,KAAKJ,OAAOH,iBAEvDK,MAAK,SAAUI,GACdC,QAAQC,IAAIF,Q,+BAKhB,OACI,yBAAKpB,UAAU,iBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACX,yBAAKuB,IAAKrB,KAAKI,MAAMQ,OAAOU,UAAWC,IAAKvB,KAAKI,MAAMQ,OAAOY,SAElE,yBAAK1B,UAAU,WACX,wBAAIA,UAAU,kBAAkBE,KAAKI,MAAMQ,OAAOY,OAClD,6BAAM,6BACN,wBAAI1B,UAAU,aAAd,eAGA,yBAAKA,UAAU,oBACVE,KAAKT,MAAMkB,YAAYgB,KAAI,SAACC,GACzB,OAAO,yBAAK5B,UAAU,OAAO6B,IAAKD,GAAaA,c,GA9BxDpB,IAAMC,WCuBdqB,EAvBF,SAAAxB,GAET,OAAGA,EAAMyB,QAAQC,OAET,yBAAKhC,UAAU,yCAEPM,EAAMyB,QAAQJ,KAAI,SAACb,GACf,OAAO,kBAAC,EAAD,CAAUA,OAAQA,EAAQe,IAAKf,EAAOY,YAS7D,yBAAK1B,UAAU,kCCcRiC,E,2MAzBbxC,MAAQ,CAACsC,QAAS,I,EAElBxB,cAAgB,SAAA2B,GAEdtB,IAAMC,IAAN,sFAAyFqB,IAAUlB,MAAK,SAASC,GAC3GA,EAASC,KAAKa,SAChB7B,KAAKL,SAAS,CAAEkC,QAASd,EAASC,KAAKa,aACxCf,MAAK,SAASI,GACfC,QAAQC,IAAIF,O,wEAOd,OACI,yBAAKpB,UAAU,gBACb,kBAAC,EAAD,CAAQO,cAAeL,KAAKK,gBAC5B,kBAAC,EAAD,CAAMwB,QAAS7B,KAAKT,MAAMsC,e,GApBlBvB,IAAMC,WCMJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.0ff184c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Search extends React.Component {\r\n    \r\n    state = { input: '' };\r\n\r\n    onChangeSearch = (e) => {\r\n        // e.preventDefault; \r\n        this.setState({ input: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui action fluid input wrap\">\r\n                <input type=\"text\" value={this.state.input} onChange={this.onChangeSearch}  placeholder=\"Search here...\"/>\r\n                <button className=\"ui button\" onClick={() => this.props.onClickSearch(this.state.input)} >Search</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Search;\r\n\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass FoodItem extends React.Component {\r\n\r\n    state = { ingredients: [] };\r\n\r\n    componentDidMount() {\r\n        \r\n        axios.get(`https://www.food2fork.com/api/get?key=3fd71b76fd36502aa04f1e6fb19d9fc1&rId=${this.props.recipe.recipe_id}`).then(response => {\r\n            if (response.data.recipe.hasOwnProperty('ingredients'))  {\r\n                this.setState({ ingredients: response.data.recipe.ingredients });\r\n            }\r\n        }).then(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui items wrap\">\r\n                <div className=\"item\">\r\n                    <div className=\"image\">\r\n                        <img src={this.props.recipe.image_url} alt={this.props.recipe.title} />\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"ui blue header\">{this.props.recipe.title}</h3>\r\n                        <br /><br />\r\n                        <h4 className=\"ui header\">\r\n                            Ingredients\r\n                        </h4>\r\n                        <div className=\"ui bulleted list\">\r\n                            {this.state.ingredients.map((ingredient) => {\r\n                                return <div className=\"item\" key={ingredient}>{ingredient}</div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default FoodItem;","import React from 'react';\r\nimport FoodItem from './FoodItem';\r\n\r\nconst Food = props => {\r\n    \r\n    if(props.recipes.length) {\r\n        return (\r\n            <div className=\"ui one column doubling grid container\">\r\n                {\r\n                    props.recipes.map((recipe) => {\r\n                        return <FoodItem recipe={recipe} key={recipe.title} />\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        );    \r\n    }\r\n\r\n    return (\r\n        <div className=\"ui one column container wrap\">\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Food;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport Food from './components/Food';\n\nclass App extends React.Component {\n\n  state = {recipes: []};\n\n  onClickSearch = search => {\n    \n    axios.get(`https://www.food2fork.com/api/search?key=3fd71b76fd36502aa04f1e6fb19d9fc1&q=${search}`).then(function(response){\n      if (response.data.recipes)\n        this.setState({ recipes: response.data.recipes });\n    }).then(function(error){\n      console.log(error);\n    });\n\n  };\n  \n\n  render() {\n    return (\n        <div className=\"ui container\">\n          <Search onClickSearch={this.onClickSearch} />\n          <Food recipes={this.state.recipes} />          \n        </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}